//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

namespace vamp.ampService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlbumSongWCF", Namespace="http://schemas.datacontract.org/2004/07/amp")]
    [System.SerializableAttribute()]
    public partial class AlbumSongWCF : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OverrideNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QueueIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RatingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SongNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SongNameNoQueueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagStrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float VolumeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string YearField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Album {
            get {
                return this.AlbumField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumField, value) != true)) {
                    this.AlbumField = value;
                    this.RaisePropertyChanged("Album");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Artist {
            get {
                return this.ArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistField, value) != true)) {
                    this.ArtistField = value;
                    this.RaisePropertyChanged("Artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullFileName {
            get {
                return this.FullFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullFileNameField, value) != true)) {
                    this.FullFileNameField = value;
                    this.RaisePropertyChanged("FullFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OverrideName {
            get {
                return this.OverrideNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OverrideNameField, value) != true)) {
                    this.OverrideNameField = value;
                    this.RaisePropertyChanged("OverrideName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QueueIndex {
            get {
                return this.QueueIndexField;
            }
            set {
                if ((this.QueueIndexField.Equals(value) != true)) {
                    this.QueueIndexField = value;
                    this.RaisePropertyChanged("QueueIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rating {
            get {
                return this.RatingField;
            }
            set {
                if ((this.RatingField.Equals(value) != true)) {
                    this.RatingField = value;
                    this.RaisePropertyChanged("Rating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SongName {
            get {
                return this.SongNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SongNameField, value) != true)) {
                    this.SongNameField = value;
                    this.RaisePropertyChanged("SongName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SongNameNoQueue {
            get {
                return this.SongNameNoQueueField;
            }
            set {
                if ((object.ReferenceEquals(this.SongNameNoQueueField, value) != true)) {
                    this.SongNameNoQueueField = value;
                    this.RaisePropertyChanged("SongNameNoQueue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagStr {
            get {
                return this.TagStrField;
            }
            set {
                if ((object.ReferenceEquals(this.TagStrField, value) != true)) {
                    this.TagStrField = value;
                    this.RaisePropertyChanged("TagStr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Track {
            get {
                return this.TrackField;
            }
            set {
                if ((object.ReferenceEquals(this.TrackField, value) != true)) {
                    this.TrackField = value;
                    this.RaisePropertyChanged("Track");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Volume {
            get {
                return this.VolumeField;
            }
            set {
                if ((this.VolumeField.Equals(value) != true)) {
                    this.VolumeField = value;
                    this.RaisePropertyChanged("Volume");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Year {
            get {
                return this.YearField;
            }
            set {
                if ((object.ReferenceEquals(this.YearField, value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerState", Namespace="http://schemas.datacontract.org/2004/07/amp")]
    [System.SerializableAttribute()]
    public partial class PlayerState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AlbumChangedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AlbumContentsChangedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AlbumLoadingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanGoPreviousField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentAlbumNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentSongIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CurrentSongLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentSongNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CurrentSongPositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PausedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool QueueChangedFromPreviousQueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QueueCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RandomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShuffleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SongsChangedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StoppedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AlbumChanged {
            get {
                return this.AlbumChangedField;
            }
            set {
                if ((this.AlbumChangedField.Equals(value) != true)) {
                    this.AlbumChangedField = value;
                    this.RaisePropertyChanged("AlbumChanged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AlbumContentsChanged {
            get {
                return this.AlbumContentsChangedField;
            }
            set {
                if ((this.AlbumContentsChangedField.Equals(value) != true)) {
                    this.AlbumContentsChangedField = value;
                    this.RaisePropertyChanged("AlbumContentsChanged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AlbumLoading {
            get {
                return this.AlbumLoadingField;
            }
            set {
                if ((this.AlbumLoadingField.Equals(value) != true)) {
                    this.AlbumLoadingField = value;
                    this.RaisePropertyChanged("AlbumLoading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanGoPrevious {
            get {
                return this.CanGoPreviousField;
            }
            set {
                if ((this.CanGoPreviousField.Equals(value) != true)) {
                    this.CanGoPreviousField = value;
                    this.RaisePropertyChanged("CanGoPrevious");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentAlbumName {
            get {
                return this.CurrentAlbumNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentAlbumNameField, value) != true)) {
                    this.CurrentAlbumNameField = value;
                    this.RaisePropertyChanged("CurrentAlbumName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentSongID {
            get {
                return this.CurrentSongIDField;
            }
            set {
                if ((this.CurrentSongIDField.Equals(value) != true)) {
                    this.CurrentSongIDField = value;
                    this.RaisePropertyChanged("CurrentSongID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CurrentSongLength {
            get {
                return this.CurrentSongLengthField;
            }
            set {
                if ((this.CurrentSongLengthField.Equals(value) != true)) {
                    this.CurrentSongLengthField = value;
                    this.RaisePropertyChanged("CurrentSongLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentSongName {
            get {
                return this.CurrentSongNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentSongNameField, value) != true)) {
                    this.CurrentSongNameField = value;
                    this.RaisePropertyChanged("CurrentSongName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CurrentSongPosition {
            get {
                return this.CurrentSongPositionField;
            }
            set {
                if ((this.CurrentSongPositionField.Equals(value) != true)) {
                    this.CurrentSongPositionField = value;
                    this.RaisePropertyChanged("CurrentSongPosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Paused {
            get {
                return this.PausedField;
            }
            set {
                if ((this.PausedField.Equals(value) != true)) {
                    this.PausedField = value;
                    this.RaisePropertyChanged("Paused");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool QueueChangedFromPreviousQuery {
            get {
                return this.QueueChangedFromPreviousQueryField;
            }
            set {
                if ((this.QueueChangedFromPreviousQueryField.Equals(value) != true)) {
                    this.QueueChangedFromPreviousQueryField = value;
                    this.RaisePropertyChanged("QueueChangedFromPreviousQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QueueCount {
            get {
                return this.QueueCountField;
            }
            set {
                if ((this.QueueCountField.Equals(value) != true)) {
                    this.QueueCountField = value;
                    this.RaisePropertyChanged("QueueCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Random {
            get {
                return this.RandomField;
            }
            set {
                if ((this.RandomField.Equals(value) != true)) {
                    this.RandomField = value;
                    this.RaisePropertyChanged("Random");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Shuffle {
            get {
                return this.ShuffleField;
            }
            set {
                if ((this.ShuffleField.Equals(value) != true)) {
                    this.ShuffleField = value;
                    this.RaisePropertyChanged("Shuffle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SongsChanged {
            get {
                return this.SongsChangedField;
            }
            set {
                if ((this.SongsChangedField.Equals(value) != true)) {
                    this.SongsChangedField = value;
                    this.RaisePropertyChanged("SongsChanged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Stopped {
            get {
                return this.StoppedField;
            }
            set {
                if ((this.StoppedField.Equals(value) != true)) {
                    this.StoppedField = value;
                    this.RaisePropertyChanged("Stopped");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueEntry", Namespace="http://schemas.datacontract.org/2004/07/amp")]
    [System.SerializableAttribute()]
    public partial class QueueEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreteDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueueNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreteDate {
            get {
                return this.CreteDateField;
            }
            set {
                if ((this.CreteDateField.Equals(value) != true)) {
                    this.CreteDateField = value;
                    this.RaisePropertyChanged("CreteDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueueName {
            get {
                return this.QueueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.QueueNameField, value) != true)) {
                    this.QueueNameField = value;
                    this.RaisePropertyChanged("QueueName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlbumWCF", Namespace="http://schemas.datacontract.org/2004/07/amp")]
    [System.SerializableAttribute()]
    public partial class AlbumWCF : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://ampRemote", ConfigurationName="ampService.IampRemote")]
    public interface IampRemote {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetAlbumName", ReplyAction="http://ampRemote/IampRemote/GetAlbumNameResponse")]
        string GetAlbumName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetAlbumName", ReplyAction="http://ampRemote/IampRemote/GetAlbumNameResponse")]
        System.Threading.Tasks.Task<string> GetAlbumNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/NextSong", ReplyAction="http://ampRemote/IampRemote/NextSongResponse")]
        void NextSong();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/NextSong", ReplyAction="http://ampRemote/IampRemote/NextSongResponse")]
        System.Threading.Tasks.Task NextSongAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/PreviousSong", ReplyAction="http://ampRemote/IampRemote/PreviousSongResponse")]
        void PreviousSong();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/PreviousSong", ReplyAction="http://ampRemote/IampRemote/PreviousSongResponse")]
        System.Threading.Tasks.Task PreviousSongAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/CanGoPrevious", ReplyAction="http://ampRemote/IampRemote/CanGoPreviousResponse")]
        bool CanGoPrevious();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/CanGoPrevious", ReplyAction="http://ampRemote/IampRemote/CanGoPreviousResponse")]
        System.Threading.Tasks.Task<bool> CanGoPreviousAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetAlbumSongs", ReplyAction="http://ampRemote/IampRemote/GetAlbumSongsResponse")]
        vamp.ampService.AlbumSongWCF[] GetAlbumSongs(bool queued);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetAlbumSongs", ReplyAction="http://ampRemote/IampRemote/GetAlbumSongsResponse")]
        System.Threading.Tasks.Task<vamp.ampService.AlbumSongWCF[]> GetAlbumSongsAsync(bool queued);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetQueuedSongs", ReplyAction="http://ampRemote/IampRemote/GetQueuedSongsResponse")]
        vamp.ampService.AlbumSongWCF[] GetQueuedSongs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetQueuedSongs", ReplyAction="http://ampRemote/IampRemote/GetQueuedSongsResponse")]
        System.Threading.Tasks.Task<vamp.ampService.AlbumSongWCF[]> GetQueuedSongsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetPlayingSong", ReplyAction="http://ampRemote/IampRemote/GetPlayingSongResponse")]
        System.Tuple<int, double, double> GetPlayingSong();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetPlayingSong", ReplyAction="http://ampRemote/IampRemote/GetPlayingSongResponse")]
        System.Threading.Tasks.Task<System.Tuple<int, double, double>> GetPlayingSongAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetPlayerState", ReplyAction="http://ampRemote/IampRemote/GetPlayerStateResponse")]
        vamp.ampService.PlayerState GetPlayerState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetPlayerState", ReplyAction="http://ampRemote/IampRemote/GetPlayerStateResponse")]
        System.Threading.Tasks.Task<vamp.ampService.PlayerState> GetPlayerStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SetPositionSeconds", ReplyAction="http://ampRemote/IampRemote/SetPositionSecondsResponse")]
        void SetPositionSeconds(double seconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SetPositionSeconds", ReplyAction="http://ampRemote/IampRemote/SetPositionSecondsResponse")]
        System.Threading.Tasks.Task SetPositionSecondsAsync(double seconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/QueueChanged", ReplyAction="http://ampRemote/IampRemote/QueueChangedResponse")]
        bool QueueChanged();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/QueueChanged", ReplyAction="http://ampRemote/IampRemote/QueueChangedResponse")]
        System.Threading.Tasks.Task<bool> QueueChangedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/AlbumPlayListChanged", ReplyAction="http://ampRemote/IampRemote/AlbumPlayListChangedResponse")]
        bool AlbumPlayListChanged();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/AlbumPlayListChanged", ReplyAction="http://ampRemote/IampRemote/AlbumPlayListChangedResponse")]
        System.Threading.Tasks.Task<bool> AlbumPlayListChangedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/AlbumChanged", ReplyAction="http://ampRemote/IampRemote/AlbumChangedResponse")]
        bool AlbumChanged();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/AlbumChanged", ReplyAction="http://ampRemote/IampRemote/AlbumChangedResponse")]
        System.Threading.Tasks.Task<bool> AlbumChangedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Queue", ReplyAction="http://ampRemote/IampRemote/QueueResponse")]
        vamp.ampService.AlbumSongWCF[] Queue(bool insert, vamp.ampService.AlbumSongWCF[] queueList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Queue", ReplyAction="http://ampRemote/IampRemote/QueueResponse")]
        System.Threading.Tasks.Task<vamp.ampService.AlbumSongWCF[]> QueueAsync(bool insert, vamp.ampService.AlbumSongWCF[] queueList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetChangedSongs", ReplyAction="http://ampRemote/IampRemote/GetChangedSongsResponse")]
        vamp.ampService.AlbumSongWCF[] GetChangedSongs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetChangedSongs", ReplyAction="http://ampRemote/IampRemote/GetChangedSongsResponse")]
        System.Threading.Tasks.Task<vamp.ampService.AlbumSongWCF[]> GetChangedSongsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/QueueID", ReplyAction="http://ampRemote/IampRemote/QueueIDResponse")]
        vamp.ampService.AlbumSongWCF[] QueueID(bool insert, int[] songIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/QueueID", ReplyAction="http://ampRemote/IampRemote/QueueIDResponse")]
        System.Threading.Tasks.Task<vamp.ampService.AlbumSongWCF[]> QueueIDAsync(bool insert, int[] songIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Paused", ReplyAction="http://ampRemote/IampRemote/PausedResponse")]
        bool Paused();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Paused", ReplyAction="http://ampRemote/IampRemote/PausedResponse")]
        System.Threading.Tasks.Task<bool> PausedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Pause", ReplyAction="http://ampRemote/IampRemote/PauseResponse")]
        void Pause();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Pause", ReplyAction="http://ampRemote/IampRemote/PauseResponse")]
        System.Threading.Tasks.Task PauseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Stopped", ReplyAction="http://ampRemote/IampRemote/StoppedResponse")]
        bool Stopped();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Stopped", ReplyAction="http://ampRemote/IampRemote/StoppedResponse")]
        System.Threading.Tasks.Task<bool> StoppedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Playing", ReplyAction="http://ampRemote/IampRemote/PlayingResponse")]
        bool Playing();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Playing", ReplyAction="http://ampRemote/IampRemote/PlayingResponse")]
        System.Threading.Tasks.Task<bool> PlayingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Play", ReplyAction="http://ampRemote/IampRemote/PlayResponse")]
        void Play();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Play", ReplyAction="http://ampRemote/IampRemote/PlayResponse")]
        System.Threading.Tasks.Task PlayAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/PlayID", ReplyAction="http://ampRemote/IampRemote/PlayIDResponse")]
        void PlayID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/PlayID", ReplyAction="http://ampRemote/IampRemote/PlayIDResponse")]
        System.Threading.Tasks.Task PlayIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Randomizing", ReplyAction="http://ampRemote/IampRemote/RandomizingResponse")]
        bool Randomizing();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Randomizing", ReplyAction="http://ampRemote/IampRemote/RandomizingResponse")]
        System.Threading.Tasks.Task<bool> RandomizingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SetRandomizing", ReplyAction="http://ampRemote/IampRemote/SetRandomizingResponse")]
        void SetRandomizing(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SetRandomizing", ReplyAction="http://ampRemote/IampRemote/SetRandomizingResponse")]
        System.Threading.Tasks.Task SetRandomizingAsync(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Shuffle", ReplyAction="http://ampRemote/IampRemote/ShuffleResponse")]
        bool Shuffle();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Shuffle", ReplyAction="http://ampRemote/IampRemote/ShuffleResponse")]
        System.Threading.Tasks.Task<bool> ShuffleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SetShuffle", ReplyAction="http://ampRemote/IampRemote/SetShuffleResponse")]
        void SetShuffle(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SetShuffle", ReplyAction="http://ampRemote/IampRemote/SetShuffleResponse")]
        System.Threading.Tasks.Task SetShuffleAsync(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Suffle", ReplyAction="http://ampRemote/IampRemote/SuffleResponse")]
        bool Suffle();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/Suffle", ReplyAction="http://ampRemote/IampRemote/SuffleResponse")]
        System.Threading.Tasks.Task<bool> SuffleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SetSuffle", ReplyAction="http://ampRemote/IampRemote/SetSuffleResponse")]
        void SetSuffle(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SetSuffle", ReplyAction="http://ampRemote/IampRemote/SetSuffleResponse")]
        System.Threading.Tasks.Task SetSuffleAsync(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/RemoveSongFromAlbum", ReplyAction="http://ampRemote/IampRemote/RemoveSongFromAlbumResponse")]
        bool RemoveSongFromAlbum(vamp.ampService.AlbumSongWCF song);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/RemoveSongFromAlbum", ReplyAction="http://ampRemote/IampRemote/RemoveSongFromAlbumResponse")]
        System.Threading.Tasks.Task<bool> RemoveSongFromAlbumAsync(vamp.ampService.AlbumSongWCF song);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SetVolume", ReplyAction="http://ampRemote/IampRemote/SetVolumeResponse")]
        bool SetVolume(float volume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SetVolume", ReplyAction="http://ampRemote/IampRemote/SetVolumeResponse")]
        System.Threading.Tasks.Task<bool> SetVolumeAsync(float volume);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SetRating", ReplyAction="http://ampRemote/IampRemote/SetRatingResponse")]
        bool SetRating(int rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SetRating", ReplyAction="http://ampRemote/IampRemote/SetRatingResponse")]
        System.Threading.Tasks.Task<bool> SetRatingAsync(int rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetQueueList", ReplyAction="http://ampRemote/IampRemote/GetQueueListResponse")]
        vamp.ampService.QueueEntry[] GetQueueList(string albumName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetQueueList", ReplyAction="http://ampRemote/IampRemote/GetQueueListResponse")]
        System.Threading.Tasks.Task<vamp.ampService.QueueEntry[]> GetQueueListAsync(string albumName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetQueueListCurrentAlbum", ReplyAction="http://ampRemote/IampRemote/GetQueueListCurrentAlbumResponse")]
        vamp.ampService.QueueEntry[] GetQueueListCurrentAlbum();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetQueueListCurrentAlbum", ReplyAction="http://ampRemote/IampRemote/GetQueueListCurrentAlbumResponse")]
        System.Threading.Tasks.Task<vamp.ampService.QueueEntry[]> GetQueueListCurrentAlbumAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/LoadQueue", ReplyAction="http://ampRemote/IampRemote/LoadQueueResponse")]
        void LoadQueue(int QueueID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/LoadQueue", ReplyAction="http://ampRemote/IampRemote/LoadQueueResponse")]
        System.Threading.Tasks.Task LoadQueueAsync(int QueueID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/AppendQueue", ReplyAction="http://ampRemote/IampRemote/AppendQueueResponse")]
        void AppendQueue(int QueueID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/AppendQueue", ReplyAction="http://ampRemote/IampRemote/AppendQueueResponse")]
        System.Threading.Tasks.Task AppendQueueAsync(int QueueID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetAlbums", ReplyAction="http://ampRemote/IampRemote/GetAlbumsResponse")]
        vamp.ampService.AlbumWCF[] GetAlbums();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetAlbums", ReplyAction="http://ampRemote/IampRemote/GetAlbumsResponse")]
        System.Threading.Tasks.Task<vamp.ampService.AlbumWCF[]> GetAlbumsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SelectAlbum", ReplyAction="http://ampRemote/IampRemote/SelectAlbumResponse")]
        bool SelectAlbum(string albumName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/SelectAlbum", ReplyAction="http://ampRemote/IampRemote/SelectAlbumResponse")]
        System.Threading.Tasks.Task<bool> SelectAlbumAsync(string albumName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetMemberDescriptions", ReplyAction="http://ampRemote/IampRemote/GetMemberDescriptionsResponse")]
        string GetMemberDescriptions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/GetMemberDescriptions", ReplyAction="http://ampRemote/IampRemote/GetMemberDescriptionsResponse")]
        System.Threading.Tasks.Task<string> GetMemberDescriptionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/ConnectionTest", ReplyAction="http://ampRemote/IampRemote/ConnectionTestResponse")]
        bool ConnectionTest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ampRemote/IampRemote/ConnectionTest", ReplyAction="http://ampRemote/IampRemote/ConnectionTestResponse")]
        System.Threading.Tasks.Task<bool> ConnectionTestAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IampRemoteChannel : vamp.ampService.IampRemote, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IampRemoteClient : System.ServiceModel.ClientBase<vamp.ampService.IampRemote>, vamp.ampService.IampRemote {
        
        public IampRemoteClient() {
        }
        
        public IampRemoteClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IampRemoteClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IampRemoteClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IampRemoteClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetAlbumName() {
            return base.Channel.GetAlbumName();
        }
        
        public System.Threading.Tasks.Task<string> GetAlbumNameAsync() {
            return base.Channel.GetAlbumNameAsync();
        }
        
        public void NextSong() {
            base.Channel.NextSong();
        }
        
        public System.Threading.Tasks.Task NextSongAsync() {
            return base.Channel.NextSongAsync();
        }
        
        public void PreviousSong() {
            base.Channel.PreviousSong();
        }
        
        public System.Threading.Tasks.Task PreviousSongAsync() {
            return base.Channel.PreviousSongAsync();
        }
        
        public bool CanGoPrevious() {
            return base.Channel.CanGoPrevious();
        }
        
        public System.Threading.Tasks.Task<bool> CanGoPreviousAsync() {
            return base.Channel.CanGoPreviousAsync();
        }
        
        public vamp.ampService.AlbumSongWCF[] GetAlbumSongs(bool queued) {
            return base.Channel.GetAlbumSongs(queued);
        }
        
        public System.Threading.Tasks.Task<vamp.ampService.AlbumSongWCF[]> GetAlbumSongsAsync(bool queued) {
            return base.Channel.GetAlbumSongsAsync(queued);
        }
        
        public vamp.ampService.AlbumSongWCF[] GetQueuedSongs() {
            return base.Channel.GetQueuedSongs();
        }
        
        public System.Threading.Tasks.Task<vamp.ampService.AlbumSongWCF[]> GetQueuedSongsAsync() {
            return base.Channel.GetQueuedSongsAsync();
        }
        
        public System.Tuple<int, double, double> GetPlayingSong() {
            return base.Channel.GetPlayingSong();
        }
        
        public System.Threading.Tasks.Task<System.Tuple<int, double, double>> GetPlayingSongAsync() {
            return base.Channel.GetPlayingSongAsync();
        }
        
        public vamp.ampService.PlayerState GetPlayerState() {
            return base.Channel.GetPlayerState();
        }
        
        public System.Threading.Tasks.Task<vamp.ampService.PlayerState> GetPlayerStateAsync() {
            return base.Channel.GetPlayerStateAsync();
        }
        
        public void SetPositionSeconds(double seconds) {
            base.Channel.SetPositionSeconds(seconds);
        }
        
        public System.Threading.Tasks.Task SetPositionSecondsAsync(double seconds) {
            return base.Channel.SetPositionSecondsAsync(seconds);
        }
        
        public bool QueueChanged() {
            return base.Channel.QueueChanged();
        }
        
        public System.Threading.Tasks.Task<bool> QueueChangedAsync() {
            return base.Channel.QueueChangedAsync();
        }
        
        public bool AlbumPlayListChanged() {
            return base.Channel.AlbumPlayListChanged();
        }
        
        public System.Threading.Tasks.Task<bool> AlbumPlayListChangedAsync() {
            return base.Channel.AlbumPlayListChangedAsync();
        }
        
        public bool AlbumChanged() {
            return base.Channel.AlbumChanged();
        }
        
        public System.Threading.Tasks.Task<bool> AlbumChangedAsync() {
            return base.Channel.AlbumChangedAsync();
        }
        
        public vamp.ampService.AlbumSongWCF[] Queue(bool insert, vamp.ampService.AlbumSongWCF[] queueList) {
            return base.Channel.Queue(insert, queueList);
        }
        
        public System.Threading.Tasks.Task<vamp.ampService.AlbumSongWCF[]> QueueAsync(bool insert, vamp.ampService.AlbumSongWCF[] queueList) {
            return base.Channel.QueueAsync(insert, queueList);
        }
        
        public vamp.ampService.AlbumSongWCF[] GetChangedSongs() {
            return base.Channel.GetChangedSongs();
        }
        
        public System.Threading.Tasks.Task<vamp.ampService.AlbumSongWCF[]> GetChangedSongsAsync() {
            return base.Channel.GetChangedSongsAsync();
        }
        
        public vamp.ampService.AlbumSongWCF[] QueueID(bool insert, int[] songIDs) {
            return base.Channel.QueueID(insert, songIDs);
        }
        
        public System.Threading.Tasks.Task<vamp.ampService.AlbumSongWCF[]> QueueIDAsync(bool insert, int[] songIDs) {
            return base.Channel.QueueIDAsync(insert, songIDs);
        }
        
        public bool Paused() {
            return base.Channel.Paused();
        }
        
        public System.Threading.Tasks.Task<bool> PausedAsync() {
            return base.Channel.PausedAsync();
        }
        
        public void Pause() {
            base.Channel.Pause();
        }
        
        public System.Threading.Tasks.Task PauseAsync() {
            return base.Channel.PauseAsync();
        }
        
        public bool Stopped() {
            return base.Channel.Stopped();
        }
        
        public System.Threading.Tasks.Task<bool> StoppedAsync() {
            return base.Channel.StoppedAsync();
        }
        
        public bool Playing() {
            return base.Channel.Playing();
        }
        
        public System.Threading.Tasks.Task<bool> PlayingAsync() {
            return base.Channel.PlayingAsync();
        }
        
        public void Play() {
            base.Channel.Play();
        }
        
        public System.Threading.Tasks.Task PlayAsync() {
            return base.Channel.PlayAsync();
        }
        
        public void PlayID(int ID) {
            base.Channel.PlayID(ID);
        }
        
        public System.Threading.Tasks.Task PlayIDAsync(int ID) {
            return base.Channel.PlayIDAsync(ID);
        }
        
        public bool Randomizing() {
            return base.Channel.Randomizing();
        }
        
        public System.Threading.Tasks.Task<bool> RandomizingAsync() {
            return base.Channel.RandomizingAsync();
        }
        
        public void SetRandomizing(bool value) {
            base.Channel.SetRandomizing(value);
        }
        
        public System.Threading.Tasks.Task SetRandomizingAsync(bool value) {
            return base.Channel.SetRandomizingAsync(value);
        }
        
        public bool Shuffle() {
            return base.Channel.Shuffle();
        }
        
        public System.Threading.Tasks.Task<bool> ShuffleAsync() {
            return base.Channel.ShuffleAsync();
        }
        
        public void SetShuffle(bool value) {
            base.Channel.SetShuffle(value);
        }
        
        public System.Threading.Tasks.Task SetShuffleAsync(bool value) {
            return base.Channel.SetShuffleAsync(value);
        }
        
        public bool Suffle() {
            return base.Channel.Suffle();
        }
        
        public System.Threading.Tasks.Task<bool> SuffleAsync() {
            return base.Channel.SuffleAsync();
        }
        
        public void SetSuffle(bool value) {
            base.Channel.SetSuffle(value);
        }
        
        public System.Threading.Tasks.Task SetSuffleAsync(bool value) {
            return base.Channel.SetSuffleAsync(value);
        }
        
        public bool RemoveSongFromAlbum(vamp.ampService.AlbumSongWCF song) {
            return base.Channel.RemoveSongFromAlbum(song);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveSongFromAlbumAsync(vamp.ampService.AlbumSongWCF song) {
            return base.Channel.RemoveSongFromAlbumAsync(song);
        }
        
        public bool SetVolume(float volume) {
            return base.Channel.SetVolume(volume);
        }
        
        public System.Threading.Tasks.Task<bool> SetVolumeAsync(float volume) {
            return base.Channel.SetVolumeAsync(volume);
        }
        
        public bool SetRating(int rating) {
            return base.Channel.SetRating(rating);
        }
        
        public System.Threading.Tasks.Task<bool> SetRatingAsync(int rating) {
            return base.Channel.SetRatingAsync(rating);
        }
        
        public vamp.ampService.QueueEntry[] GetQueueList(string albumName) {
            return base.Channel.GetQueueList(albumName);
        }
        
        public System.Threading.Tasks.Task<vamp.ampService.QueueEntry[]> GetQueueListAsync(string albumName) {
            return base.Channel.GetQueueListAsync(albumName);
        }
        
        public vamp.ampService.QueueEntry[] GetQueueListCurrentAlbum() {
            return base.Channel.GetQueueListCurrentAlbum();
        }
        
        public System.Threading.Tasks.Task<vamp.ampService.QueueEntry[]> GetQueueListCurrentAlbumAsync() {
            return base.Channel.GetQueueListCurrentAlbumAsync();
        }
        
        public void LoadQueue(int QueueID) {
            base.Channel.LoadQueue(QueueID);
        }
        
        public System.Threading.Tasks.Task LoadQueueAsync(int QueueID) {
            return base.Channel.LoadQueueAsync(QueueID);
        }
        
        public void AppendQueue(int QueueID) {
            base.Channel.AppendQueue(QueueID);
        }
        
        public System.Threading.Tasks.Task AppendQueueAsync(int QueueID) {
            return base.Channel.AppendQueueAsync(QueueID);
        }
        
        public vamp.ampService.AlbumWCF[] GetAlbums() {
            return base.Channel.GetAlbums();
        }
        
        public System.Threading.Tasks.Task<vamp.ampService.AlbumWCF[]> GetAlbumsAsync() {
            return base.Channel.GetAlbumsAsync();
        }
        
        public bool SelectAlbum(string albumName) {
            return base.Channel.SelectAlbum(albumName);
        }
        
        public System.Threading.Tasks.Task<bool> SelectAlbumAsync(string albumName) {
            return base.Channel.SelectAlbumAsync(albumName);
        }
        
        public string GetMemberDescriptions() {
            return base.Channel.GetMemberDescriptions();
        }
        
        public System.Threading.Tasks.Task<string> GetMemberDescriptionsAsync() {
            return base.Channel.GetMemberDescriptionsAsync();
        }
        
        public bool ConnectionTest() {
            return base.Channel.ConnectionTest();
        }
        
        public System.Threading.Tasks.Task<bool> ConnectionTestAsync() {
            return base.Channel.ConnectionTestAsync();
        }
    }
}

#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
