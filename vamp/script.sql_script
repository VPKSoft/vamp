/*
vamp#

A software for video audio and photo playback.
Copyright © 2018 VPKSoft, Petteri Kautonen

Contact: vpksoft@vpksoft.net

This file is part of vamp#.

vamp# is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

vamp# is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with vamp#.  If not, see <http://www.gnu.org/licenses/>.
*/

--VER 0
CREATE TABLE IF NOT EXISTS DBVERSION(DBVERSION INTEGER NOT NULL);
--ENDVER 0

--VER 1
CREATE TABLE IF NOT EXISTS VIDEOFILE(
ID INTEGER PRIMARY KEY AUTOINCREMENT,
FILENAME TEXT NOT NULL,
FILENAMEFULL TEXT NOT NULL,
FILESIZE INTEGER NULL,
VOLUME REAL NOT NULL DEFAULT 100.0,
PLAYBACKPOSITION INTEGER(8) NOT NULL DEFAULT 0,
PLAYED INTEGER NOT NULL DEFAULT 0);
--ENDVER 1

--VER 2
CREATE TABLE IF NOT EXISTS SOFTWARE_LICENSE(
  LICENSE TEXT NULL
);

INSERT INTO SOFTWARE_LICENSE(LICENSE) VALUES('
vamp#

A software for video audio and photo playback.
Copyright © 2018 VPKSoft, Petteri Kautonen

Contact: vpksoft@vpksoft.net

This file is part of vamp#.

vamp# is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

vamp# is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with vamp#.  If not, see <http://www.gnu.org/licenses/>.');

--ENDVER 2

--VER 3

CREATE TABLE IF NOT EXISTS MEDIALOCATION(
ID INTEGER PRIMARY KEY AUTOINCREMENT,
LOCATION TEXT NOT NULL,
PARENT_LOCATION TEXT NULL,
DESCRIPTION TEXT NOT NULL,  
TYPE INTEGER NOT NULL); --0 = Series directory, 1 = Movie directory, 2 = URL, 3..n =???

--ENDVER 3

--VER 4

ALTER TABLE MEDIALOCATION RENAME TO MEDIALOCATION_OLD;

CREATE TABLE IF NOT EXISTS MEDIALOCATION(
ID INTEGER PRIMARY KEY AUTOINCREMENT,
LOCATION TEXT NOT NULL,
PARENT_LOCATION TEXT NULL,
DESCRIPTION TEXT NOT NULL,  
TYPE INTEGER NOT NULL, --0 = Series directory, 1 = Movie directory, 2 = URL, 3..n =???
CONTEXT TEXT NOT NULL DEFAULT 'DEFAULT'); 


INSERT INTO MEDIALOCATION(LOCATION, PARENT_LOCATION, DESCRIPTION, TYPE, CONTEXT)
SELECT LOCATION, PARENT_LOCATION, DESCRIPTION, TYPE, 'DEFAULT' FROM MEDIALOCATION_OLD;

DROP TABLE MEDIALOCATION_OLD;  

--ENDVER 4

--VER 5

ALTER TABLE VIDEOFILE RENAME TO VIDEOFILE_OLD;

CREATE TABLE IF NOT EXISTS VIDEOFILE(
ID INTEGER PRIMARY KEY AUTOINCREMENT,
FILENAME TEXT NOT NULL,
FILENAMEFULL TEXT NOT NULL,
FILESIZE INTEGER INTEGER(8) NULL,
VOLUME REAL NOT NULL DEFAULT 100.0,
PLAYBACKPOSITION INTEGER(8) NOT NULL DEFAULT 0,
LENGTH INTEGER(8) NOT NULL DEFAULT 0,
PLAYED INTEGER NOT NULL DEFAULT 0);

INSERT INTO VIDEOFILE(FILENAME, FILENAMEFULL, FILESIZE, VOLUME, PLAYBACKPOSITION, PLAYED)
SELECT FILENAME, FILENAMEFULL, FILESIZE, VOLUME, PLAYBACKPOSITION, PLAYED FROM VIDEOFILE_OLD;

DROP TABLE VIDEOFILE_OLD;

--ENDVER 5

--VER 6
CREATE TABLE IF NOT EXISTS PHOTOALBUM
(
NAME TEXT NOT NULL PRIMARY KEY,
BASEDIROVERRIDE TEXT NULL,
FIRSTDATE TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PHOTOALBUMLINK
(
NAME TEXT,
MD5HASH TEXT NOT NULL PRIMARY KEY,
FOREIGN KEY(NAME) REFERENCES PHOTOALBUM(NAME)
);

CREATE TABLE IF NOT EXISTS PHOTODATA
(
MD5HASH TEXT,
DESCRIPTION TEXT NOT NULL,
DATETIME TEXT NOT NULL,
DATETIME_FREE TEXT NULL,
FOREIGN KEY(MD5HASH) REFERENCES PHOTOALBUMLINK(MD5HASH)
);

CREATE TABLE IF NOT EXISTS PHOTODATATAG
(
MD5HASH TEXT,
TAGTEXT TEXT NOT NULL,
FOREIGN KEY(MD5HASH) REFERENCES PHOTOALBUMLINK(MD5HASH)
);

CREATE TABLE IF NOT EXISTS PHOTOFILE
(
MD5HASH TEXT,
FILENAME TEXT NOT NULL,
FOREIGN KEY(MD5HASH) REFERENCES PHOTOALBUMLINK(MD5HASH)
);
--ENDVER 6

--VER 7
PRAGMA foreign_keys = ON;
--ENDVER 7

--VER 8
CREATE VIEW IF NOT EXISTS V_PHOTOALBUM
AS
SELECT PA.NAME, IFNULL(IFNULL(NULLIF(PD.DESCRIPTION, ''), GROUP_CONCAT(PDT.TAGTEXT, ', ')), PF.FILENAME) AS DESCRIPTION, 
PD.DATETIME, PF.FILENAME, GROUP_CONCAT(PDT.TAGTEXT, ', ') AS TAGTEXT, PD.DATETIME_FREE, PD.MD5HASH, PA.BASEDIROVERRIDE
FROM PHOTODATA PD, PHOTOALBUM PA 
  LEFT OUTER JOIN PHOTOFILE PF ON(PF.MD5HASH = PD.MD5HASH) 
  LEFT OUTER JOIN PHOTODATATAG PDT ON (PDT.MD5HASH = PD.MD5HASH) 
WHERE PD.MD5HASH IN 
  (SELECT MD5HASH FROM PHOTOALBUMLINK WHERE NAME = PA.NAME) 
COLLATE NOCASE 
GROUP BY PD.DATETIME, PD.DESCRIPTION, PF.FILENAME 
ORDER BY PD.DATETIME, PD.DESCRIPTION, PF.FILENAME;
--ENDVER 8

--VER 9
CREATE UNIQUE INDEX IF NOT EXISTS IDX_PHOTOALBUM_NAME ON PHOTOALBUM (NAME);

CREATE UNIQUE INDEX IF NOT EXISTS IDX_PHOTOALBUM_NAME_BASEDIROVERRIDE_FIRSTDATE ON PHOTOALBUM (NAME, BASEDIROVERRIDE, FIRSTDATE);

CREATE UNIQUE INDEX IF NOT EXISTS IDX_PHOTOALBUMLINK_NAME_MD5HASH ON PHOTOALBUMLINK (NAME, MD5HASH);

CREATE UNIQUE INDEX IF NOT EXISTS IDX_PHOTODATA_MD5HASH_DESCRIPTION_DATETIME_DATETIME_FREE ON PHOTODATA (MD5HASH, DESCRIPTION, DATETIME, DATETIME_FREE);

CREATE INDEX IF NOT EXISTS IDX_PHOTODATATAG_MD5HASH_TAGTEXT ON PHOTODATATAG (MD5HASH, TAGTEXT);

CREATE UNIQUE INDEX IF NOT EXISTS IDX_PHOTOFILE_MD5HASH_FILENAME ON PHOTOFILE (MD5HASH, FILENAME);
--ENDVER 9

--VER 10
UPDATE MEDIALOCATION SET TYPE = 5 WHERE TYPE = 0;
--ENDVER 10

--VER 11
ALTER TABLE VIDEOFILE RENAME TO VIDEOFILE_OLD;

CREATE TABLE IF NOT EXISTS VIDEOFILE(
ID INTEGER PRIMARY KEY AUTOINCREMENT,
FILENAME TEXT NOT NULL,
FILENAMEFULL TEXT NOT NULL,
FILESIZE INTEGER INTEGER(8) NULL,
VOLUME REAL NOT NULL DEFAULT 100.0,
PLAYBACKPOSITION INTEGER(8) NOT NULL DEFAULT 0,
LENGTH INTEGER(8) NOT NULL DEFAULT 0,
PLAYED INTEGER NOT NULL DEFAULT 0,
FILETYPE INTEGER NOT NULL DEFAULT 0,
TMDBFETCHED INTEGER NOT NULL DEFAULT 0);

INSERT INTO VIDEOFILE(FILENAME, FILENAMEFULL, FILESIZE, VOLUME, PLAYBACKPOSITION, PLAYED)
SELECT FILENAME, FILENAMEFULL, FILESIZE, VOLUME, PLAYBACKPOSITION, PLAYED FROM VIDEOFILE_OLD;

DROP TABLE VIDEOFILE_OLD;

CREATE TABLE IF NOT EXISTS TMDBDETAILS
(
ROWID INTEGER PRIMARY KEY AUTOINCREMENT,
ID INTEGER NOT NULL,
SEASONID INTEGER NULL,
EPISODEID INTEGER NULL,
TITLE TEXT NOT NULL,
DESCRIPTION TEXT NULL,
DETAILDESCRIPTION TEXT NULL,
FILENAME TEXT NOT NULL,
POSTERORSTILLURL TEXT NULL,
SEASON INTEGER NULL,
EPISODE INTEGER NULL,
DURATION REAL NULL,
IMAGE BLOB NULL,
IMAGEFILENAME TEXT NULL,
FILESIZE INTEGER INTEGER(8) NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS IDX_TMDBDETAILS ON TMDBDETAILS (ID, FILENAME);

CREATE VIEW IF NOT EXISTS V_VIDEOFILE
AS 
SELECT VF.ID, VF.FILENAME, VF.FILENAMEFULL, IFNULL(VF.FILESIZE, 0) AS FILESIZE, VF.VOLUME,
VF.PLAYBACKPOSITION, VF.LENGTH, VF.PLAYED,
IFNULL(NULLIF(VF.FILETYPE, 0), 
(CASE WHEN GLOB('*S[0-9]*E*[0-9]*.*', VF.FILENAME) = 1 OR GLOB('*s[0-9]*e*[0-9]*.*', VF.FILENAME) OR
  GLOB('*[0-9]*X[0-9]*.*', VF.FILENAME) = 1 OR GLOB('*[0-9]*x[0-9]*.*', VF.FILENAME) = 1 THEN 1 ELSE 2 END)) AS FILETYPE,
CASE WHEN TD.ID IS NULL THEN 0 ELSE IFNULL(NULLIF(VF.TMDBFETCHED, 0), 1) END AS TMDBFETCHED,
IFNULL(TD.ID, -1) AS TMDBID, 
IFNULL(TD.SEASONID, -1) AS SEASONID, IFNULL(TD.EPISODEID, -1) AS EPISODEID, IFNULL(TD.TITLE, '') AS TITLE,
IFNULL(TD.DESCRIPTION, '') AS DESCRIPTION, IFNULL(TD.DETAILDESCRIPTION, '') AS DETAILDESCRIPTION,
IFNULL(TD.POSTERORSTILLURL, '') AS POSTERORSTILLURL, IFNULL(TD.SEASON, -1) AS SEASON,
IFNULL(TD.EPISODE, -1) AS EPISODE, IFNULL(TD.DURATION, 0.0) AS DURATION, TD.IMAGE,
IFNULL(TD.IMAGEFILENAME, '') AS IMAGEFILENAME, IFNULL(LENGTH(TD.IMAGE), 0) AS IMAGESIZE
FROM 
VIDEOFILE VF
  LEFT OUTER JOIN TMDBDETAILS TD ON (TD.FILENAME = VF.FILENAME AND TD.FILESIZE = VF.FILESIZE);
--ENDVER 11

--VER 12
CREATE TABLE IF NOT EXISTS APIKEYS
(
ID INTEGER PRIMARY KEY AUTOINCREMENT,
KEYNAME TEXT NOT NULL,
KEYVALUE TEXT NOT NULL
);

INSERT INTO APIKEYS(KEYNAME, KEYVALUE)
SELECT 'TMDb', 'ZAAAACplcVnDisOWw7tXQMOseEg7bcO2W8KkV30gwqPDtmhGJ246w5NbfCZ7TTBAd8OOw4JOL8OLVMOlw6Awd8O7wqQwMcOsw5U3VnXDpcKka8KjWWcww7rDjcOJw6QqUjFkO8O7SUMgAAAAEQAAADEOAAAAZBQAAABmAAAAADAYAAAAYxoAAABhDwAAAGEEAAAAZRAAAAA1GwAAAGIVAAAAZhkAAAA0DAAAADEHAAAANxYAAABiAQAAADMNAAAAOQkAAABiCAAAADAFAAAAYgsAAAAwAwAAAGMGAAAANh8AAABjHAAAAGMSAAAAOBMAAABjCgAAAGYCAAAAYh4AAABkHQAAAGMXAAAAYzwAAABrw4TDmVTCoz/CpDHDvFRkPF/Dokp6w4RHPMOcw5rCo8OpO3XDtsOkVMOSN1LDjTU+S8OEdlVBw6RrIVU='
WHERE NOT EXISTS(SELECT * FROM APIKEYS WHERE KEYNAME = 'TMDb');

--ENDVER 12

--VER 13
DROP VIEW IF EXISTS V_VIDEOFILE;

CREATE VIEW V_VIDEOFILE
AS 
SELECT VF.ID, VF.FILENAME, VF.FILENAMEFULL, IFNULL(VF.FILESIZE, 0) AS FILESIZE, VF.VOLUME,
VF.PLAYBACKPOSITION, VF.LENGTH, VF.PLAYED,
IFNULL(NULLIF(VF.FILETYPE, 0), 
(CASE WHEN GLOB('*S[0-9]*E*[0-9]*.*', VF.FILENAME) = 1 OR GLOB('*s[0-9]*e*[0-9]*.*', VF.FILENAME) OR
  GLOB('*[0-9]*X[0-9]*.*', VF.FILENAME) = 1 OR GLOB('*[0-9]*x[0-9]*.*', VF.FILENAME) = 1 THEN 1 ELSE 2 END)) AS FILETYPE,
CASE WHEN TD.ID IS NULL THEN 0 ELSE IFNULL(NULLIF(VF.TMDBFETCHED, 0), 1) END AS TMDBFETCHED,
IFNULL(TD.ID, -1) AS TMDBID, 
IFNULL(TD.SEASONID, -1) AS SEASONID, IFNULL(TD.EPISODEID, -1) AS EPISODEID, IFNULL(TD.TITLE, '') AS TITLE,
IFNULL(TD.DESCRIPTION, '') AS DESCRIPTION, IFNULL(TD.DETAILDESCRIPTION, '') AS DETAILDESCRIPTION,
IFNULL(TD.POSTERORSTILLURL, '') AS POSTERORSTILLURL, IFNULL(TD.SEASON, -1) AS SEASON,
IFNULL(TD.EPISODE, -1) AS EPISODE, IFNULL(TD.DURATION, 0.0) AS DURATION, TD.IMAGE,
IFNULL(TD.IMAGEFILENAME, '') AS IMAGEFILENAME, IFNULL(LENGTH(TD.IMAGE), 0) AS IMAGESIZE,
CASE WHEN VF.PLAYED = 1 THEN 2 WHEN VF.PLAYBACKPOSITION > 0 THEN 1 ELSE 0 END AS PLAYBACKSTATE, 
REPLACE(VF.FILENAMEFULL, VF.FILENAME, '') AS FILEPATH
FROM 
VIDEOFILE VF
  LEFT OUTER JOIN TMDBDETAILS TD ON (TD.FILENAME = VF.FILENAME AND TD.FILESIZE = VF.FILESIZE);

--ENDVER 13

--VER 14
CREATE INDEX IF NOT EXISTS IDX_TMDBDETAILS_FILENAME ON TMDBDETAILS (FILENAME);
CREATE INDEX IF NOT EXISTS IDX_MEDIALOCATION_TYPE ON MEDIALOCATION (TYPE);
--ENDVER 14

--VER 15
ALTER TABLE VIDEOFILE ADD COLUMN FILEPATH TEXT NULL;

UPDATE VIDEOFILE SET FILEPATH = (SELECT FILEPATH FROM V_VIDEOFILE WHERE ID = VIDEOFILE.ID);

CREATE VIEW IF NOT EXISTS V_WATCHED_STATISTICS
AS
SELECT ML.ID, VF.FILEPATH, VF.FILETYPE,
SUM(
  CASE 
     WHEN VF.PLAYED = 1 THEN 1.0
     WHEN VF.LENGTH <> 0 THEN CAST(VF.PLAYBACKPOSITION AS REAL) / CAST(VF.LENGTH AS REAL)
     ELSE 0.0
  END) * 100 / CAST(COUNT(*) AS REAL) AS WATHED_PERCENTAGE,
SUM(VF.PLAYED) AS COUNT_WATCHED, COUNT(*) AS COUNT_ALL 
FROM VIDEOFILE VF, MEDIALOCATION ML 
WHERE (VF.FILEPATH = ML.LOCATION OR 
SUBSTR(VF.FILEPATH, 1, LENGTH(VF.FILEPATH) - 1) = ML.LOCATION) AND
ML.TYPE IN (0, 1)
GROUP BY ML.ID, VF.FILEPATH, VF.FILETYPE;

CREATE INDEX IF NOT EXISTS IDX_WATCHED_STATISTICS ON MEDIALOCATION (ID);

CREATE INDEX IF NOT EXISTS IDX_WATCHED_STATISTICS_2 ON VIDEOFILE (ID);

DELETE FROM VIDEOFILE WHERE SUBSTR(FILENAME, LENGTH(FILENAME) - 3, LENGTH(FILENAME)) = '.SRT' COLLATE NOCASE; -- bug fix..
DELETE FROM VIDEOFILE WHERE SUBSTR(FILENAME, LENGTH(FILENAME) - 3, LENGTH(FILENAME)) = '.SUB' COLLATE NOCASE; -- bug fix..
--ENDVER 15